filename= 'time1.out'

parallel_color = "#FF3C00"
parallel_color_lazy = "#008CFF"
parallel_color2 = "#EE8E00"
parallel_color_lazy2 = "#33B3AA"
sequential_color = "#00993A"
lwidth = 5

number_of_cores = 4 
min_potenz = 7
max_potenz = 11

zahl_1 = 1.03
zahl_2 = 0.93

min_thr_pot = -3
max_thr_pot = 3

p = 4

getGraphName(i) = (i == 1 || i == 3) ? "Cross Graph" : "Circle Graph"

set terminal eps size 6,4

set output 'runtime_threshold.eps'

do for [r=11:11] {

	grid_size = 2**r

	#two plots per site
	set multiplot layout 1,2  title 'relative Error, '.grid_size.' x '.grid_size

	do for [grapht=1:2] {

		#calculate max and min for scale
		exact_result1 = system("awk 'NR==1{c=0;s=0} $1==1&&$5==-1&&$3==".grid_size."{s+=$9;c++} END{print s/c}' time1.out");
		exact_result2= system("awk 'NR==1{c=0;s=0} $1==2&&$5==-1&&$3==".grid_size."{s+=$9;c++} END{print s/c}' time1.out");
		maxy1 = (system("awk 'NR==1{max=0} $1==1&&$3==".grid_size."&&$8>max{max=$8} $1==1&&$3==".sprintf("%g",grid_size)."&&$10>max&&NF==10{max=$10} END{print max;}' time1.out")/exact_result1-1)*100
		maxy2 = (system("awk 'NR==1{max=0} $1==2&&$3==".grid_size."&&$8>max{max=$8} $1==2&&$3==".sprintf("%g",grid_size)."&&$10>max&&NF==10{max=$10} END{print max;}' time1.out")/exact_result2-1)*100
		if (grapht==1) {
			exact_result = exact_result1
		} else {
			exact_result = exact_result2
		}
		maxy = (maxy1 > maxy2) ? maxy1 : maxy2
		miny1= (system("awk 'NR==1{min=100000} $1==1&&$3==".grid_size."&&$8<min{min=$8} $1==1&&$3==".sprintf("%g",grid_size)."&&$10<min&&NF==10{min=$10} END{print min;}' time1.out")/exact_result1-1)*100
		miny2= (system("awk 'NR==1{min=100000} $1==2&&$3==".grid_size."&&$8<min{min=$8} $1==2&&$3==".sprintf("%g",grid_size)."&&$10<min&&NF==10{min=$10} END{print min;}' time1.out")/exact_result2-1)*100
		miny= (miny1 < miny2) ? miny1 : miny2 

		#functions
		filter(col, i, retcol) = (column(col) == i ? column(retcol) : 1/0)
		filter2(col, i, col2, j, retcol) = (column(col) == i && column(col2) == j ? column(retcol) : 1/0)
		filter3(col, i, col2, j, col3, k, retcol) = (column(col) == i && column(col2) == j && column(col3) == k && column(5)>=0 ? column(retcol) : 1/0)
		filter4(col, i, col2, j, col3, k, col4, l, retcol) = (column(col) == i && column(col2) == j && column(col3) == k && column(col4) == l ? column(retcol) : 1/0)

		set style data boxplot

		set title getGraphName(grapht)
		set xlabel offset 0,0.5 'threshold relaxing'
		if (grapht==1) {
			set ylabel offset 2 'error [%]'
		} else {
			unset ylabel
		}

		#box style
		set logscale x 2
		set logscale y 10

		set pointsize 0.05
		set boxwidth 0.11
		set style fill  border lc rgb parallel_color

		set xrange [0.08:11]
#		set yrange [miny*0.5:maxy*5]

		do for [i=min_thr_pot:max_thr_pot] { set xtics add (sprintf("%g",2**i) 2**i) }

		#erste Zeile ohne Titel!
		plot \
			for [i=min_thr_pot+1:max_thr_pot] \
				filename using (2**i): \
				(filter4(1, grapht, 2, 2**i, 5, -1, 3, grid_size, 7)) \
				lc rgb sequential_color lw lwidth fill empty \
				border lc rgb sequential_color notitle, \
			filename using (2**min_thr_pot): \
				(filter4(1, grapht, 2, 2**min_thr_pot, 5, -1, 3, grid_size, 7)) \
				lc rgb sequential_color lw lwidth fill empty \
				border lc rgb sequential_color title 'sequential', \
			for [i=min_thr_pot+1:max_thr_pot] \
				filename using (2**i*zahl_2): \
				(filter4(1, grapht, 2, 2**i, 3, grid_size, 5, p, 9)) \
				lc rgb parallel_color_lazy2 lw lwidth \
				fill empty border lc rgb parallel_color_lazy2 notitle, \
			filename using (2**min_thr_pot*zahl_2): \
				(filter4(1, grapht, 2, 2**min_thr_pot, 3, grid_size, 5, p, 9)) \
				lc rgb parallel_color_lazy2 lw lwidth fill empty \
				border lc rgb parallel_color_lazy2 title 'parallel lazy 4 cores', \
			for [i=min_thr_pot+1:max_thr_pot] \
				filename using (2**i*zahl_1): \
				(filter4(1, grapht, 2, 2**i, 3, grid_size, 5, p, 7)) \
				lc rgb parallel_color2 lw lwidth notitle, \
			filename using (2**min_thr_pot*zahl_1): \
				(filter4(1, grapht, 2, 2**min_thr_pot, 3, grid_size, 5, p, 7)) \
				lc rgb parallel_color2 lw lwidth title 'parallel normal 4 cores', \
			for [i=min_thr_pot+1:max_thr_pot] \
				filename using (2**i*zahl_2): \
				(filter4(1, grapht, 2, 2**i, 3, grid_size, 5, 2*p, 9)) \
				lc rgb parallel_color_lazy lw lwidth \
				fill empty border lc rgb parallel_color_lazy notitle, \
			filename using (2**min_thr_pot*zahl_2): \
				(filter4(1, grapht, 2, 2**min_thr_pot, 3, grid_size, 5, 2*p, 9)) \
				lc rgb parallel_color_lazy lw lwidth fill empty \
				border lc rgb parallel_color_lazy title 'parallel lazy 8 cores', \
			for [i=min_thr_pot+1:max_thr_pot] \
				filename using (2**i*zahl_1): \
				(filter4(1, grapht, 2, 2**i, 3, grid_size, 5, 2*p, 7)) \
				lc rgb parallel_color lw lwidth notitle, \
			filename using (2**min_thr_pot*zahl_1): \
				(filter4(1, grapht, 2, 2**min_thr_pot, 3, grid_size, 5, 2*p, 7)) \
				lc rgb parallel_color lw lwidth title 'parallel normal 8 cores'

	}
	unset multiplot
}
