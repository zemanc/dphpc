filename= 'time1.out'

parallel_color = "#FF3C00"
parallel_color_lazy = "#008CFF"
sequential_color = "#00993A"

#Schwarzweiss: 
#parallel_color = "#8C8C8C"
#parallel_color_lazy = "#2B2B2B"
#sequential_color = "#FFFFFF"
lwidth = 3

number_of_cores = 8 
min_potenz = 7
max_potenz = 11

zahl_1 = 0.13
zahl_2 = 0.13

getGraphName(i) = (i == 1 || i == 3) ? "Cross Graph" : "Circle Graph"

set terminal eps size 6,4

set output 'strong_scaling_speedup.eps'

do for [thrp=0:0] {
	threshold = 2**(2*thrp)
	do for [r=11:11] {

		grid_size = 2**r

		#two plots per site
		set multiplot layout 1,2  title 'Speedup Strong scaling '.grid_size.' x '.grid_size.', threshold='.sprintf("%g", threshold)

		#calculate max and min for scale
		maxy = system("awk 'NR==1{max=0} $1<=2&&$2==".sprintf("%g",threshold)."&&$3==".grid_size."&&$7>max{max=$7} $1<=2&&$2==".sprintf("%g",threshold)."&&$3==".sprintf("%g",grid_size)."&&$9>max&&NF==10{max=$9} END{print max;}' time1.out")
		miny = system("awk 'NR==1{min=10000} $1<=2&&$2==".sprintf("%g",threshold)."&&$3==".grid_size."&&$7<min{min=$7} $1<=2&&$2==".sprintf("%g",threshold)."&&$3==".sprintf("%g",grid_size)."&&$9<min&&NF==10{min=$9} END{print min;}' time1.out")

		do for [grapht=1:2] {

			#functions
			filter(col, i, retcol) = (column(col) == i ? column(retcol) : 1/0)
			filter2(col, i, col2, j, retcol) = (column(col) == i && column(col2) == j ? column(retcol) : 1/0)
			filter3(col, i, col2, j, col3, k, retcol) = (column(col) == i && column(col2) == j && column(col3) == k ? column(retcol) : 1/0)
			filter4(col, i, col2, j, col3, k, col4, l, retcol) = (column(col) == i && column(col2) == j && column(col3) == k && column(col4) == l ? column(retcol) : 1/0)

			divby1 = system("awk 'NR==1{sum=0;anz=0;} $1==".grapht."&&$2==".sprintf("%g",threshold)."&&$3==".grid_size."&&$5==-1{sum+=$7;anz+=1}END{print sum/anz}' time1.out")

			set style data boxplot

			set title getGraphName(grapht) offset 0,-0.5
			set xlabel offset 0,0.5 'number of cores'
			if (grapht==1) {
				set ylabel offset 1.4,0 'speedup'
				set lmargin 7
				set rmargin 0
				set tmargin 1.3

				set y2tics format ""
				do for [i=0:6] { set ytics add (sprintf("%.1f",5*i) 5*i) }
				do for [i=0:6] { set y2tics add (" " 5*i) }
			} else {
				set lmargin 2
				set rmargin 5
				set tmargin 1.3
				unset ylabel
				unset ytics
				
				set ytics format ""
				set y2tics format "%.1f"
				do for [i=0:6] { set ytics add (" " 5*i) }
				do for [i=0:6] { set y2tics add (sprintf("%.1f",5*i) 5*i) }
			}

			#box style

			set pointsize 0.05
			set boxwidth 0.21
			set style fill  border lc rgb parallel_color

			set xrange [0.6:8.4]
			set yrange [0.3:3.3]
			set y2range [0.3:3.3]

			do for [i=1:number_of_cores] { set xtics add (sprintf("%g",i) i) }

			#erste Zeile ohne Titel!
			plot \
				for [i=2:number_of_cores] \
					filename using (i+zahl_1): \
					(divby1/filter4(1, grapht, 2, threshold, 5, i, 3, grid_size, 7)) \
					lc rgb parallel_color lw lwidth notitle, \
				filename using (1+zahl_1): \
					(divby1/filter4(1, grapht, 2, threshold, 5, 1, 3, grid_size, 7)) \
					lc rgb parallel_color lw lwidth title 'parallel normal', \
				for [i=2:number_of_cores] \
					filename using (i-zahl_2): \
					(divby1/filter4(1, grapht, 2, threshold, 5, i, 3, grid_size, 9)) \
					lc rgb parallel_color_lazy lw lwidth \
					fill empty border lc rgb parallel_color_lazy notitle, \
				filename using (1-zahl_2): \
					(divby1/filter4(1, grapht, 2, threshold, 5, 1, 3, grid_size, 9)) \
					lc rgb parallel_color_lazy lw lwidth fill empty \
					border lc rgb parallel_color_lazy title 'parallel lazy'

		}
		unset multiplot
	}
}
